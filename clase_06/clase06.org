#+title: Taller de R. Clase 06
#+author: Dr. Isaías Moreno Cruz
#+email: ismoc@cio.mx
#+date: 09-10-2024
#+latex_header: \mode<beamer>{\usetheme{Madrid}}


* Ejercicio

Leer los datos en distintos archivos de dbeta y guardarlos a una lista


#+begin_src R :results output :session curso
  rut <- "./data/dbeta" 
  files <- list.files(path=rut, pattern=".dat")
  path <- paste(rut, "/", files[1], sep="")
  df <- read.table(path, sep=",", header=FALSE, skip=1)
  #names(df)<- c('id', 'tiempo', 'cenit', 'acimut', 'declinacion', 'd', 'p1', 'p2', 'p3', 'r', 'tsolar')
  l <- list(df)
  for(f in files[-1]){
    path <- paste(rut, "/", f, sep="")
    df <- read.table(path, sep=",", header=FALSE, skip=1)
    #names(df)<- c('id', 'tiempo', 'cenit', 'acimut', 'declinacion', 'd', 'p1', 'p2', 'p3', 'r', 'tsolar')
    len<-length(l)
    l[[len+1]] <- df
    }

  length(l)
#+end_src

#+RESULTS:
: [1] 10


Obtener la distancia primedio entre 

#+begin_src R :results output :session curso
  lapply(l, function(x) mean(sqrt(x[[7]]^2+x[[9]]^2)) )
#+end_src

#+RESULTS:
#+begin_example
[[1]]
[1] 0.7349544

[[2]]
[1] 0.02026331

[[3]]
[1] 1.570952

[[4]]
[1] 0.09824783

[[5]]
[1] 2.69172

[[6]]
[1] 0.7349544

[[7]]
[1] 0.02026331

[[8]]
[1] 1.570952

[[9]]
[1] 0.09824783

[[10]]
[1] 2.69172
#+end_example


#+begin_src R :results output :session curso
  sapply(l, function(x) mean(sqrt(x[[7]]^2+x[[9]]^2)) )
#+end_src

#+RESULTS:
:  [1] 0.73495440 0.02026331 1.57095173 0.09824783 2.69171970 0.73495440 0.02026331 1.57095173 0.09824783 2.69171970

* Ejercicio II

Leer los archivos en =dbeta= y concatenarlos en un único archivo

#+begin_src R :results output :session curso
  rut <- "./data/dbeta" 
  files <- list.files(path=rut, pattern=".dat")
  path <- paste(rut, "/", files[1], sep="")
  df <- read.table(path, sep=",", header=FALSE, skip=1)
  for(f in files[-1]){
    path <- paste(rut, "/", f, sep="")
    aux <- read.table(path, sep=",", header=FALSE, skip=1)
    df <- rbind(df, aux)
    }
  names(df)<- c('id', 'tiempo', 'cenit', 'acimut', 'declinacion', 'd', 'p1', 'p2', 'p3', 'r', 'tsolar')
  time <- strptime(df$tiempo, "%Y-%m-%d %H:%M:%S")
  df$tiempo <- time
  head(df)
#+end_src

#+RESULTS:
:     id              tiempo   cenit    acimut declinacion        d      p1 p2      p3      r    tsolar
: 1 5087 2024-06-21 07:25:34 66.5503 -104.7951     23.4364 114.8646 -0.4847  0 -0.1754 0.5155  06:59:00
: 2 5087 2024-06-21 07:26:34 66.3393 -104.6980     23.4364 114.8646 -0.4855  0 -0.1792 0.5175  07:00:00
: 3 5087 2024-06-21 07:31:34 65.2827 -104.2138     23.4363 114.8646 -0.4893  0 -0.1982 0.5279  07:05:00
: 4 5087 2024-06-21 07:36:34 64.2238 -103.7316     23.4363 114.8646 -0.4928  0 -0.2173 0.5386  07:10:00
: 5 5087 2024-06-21 07:41:34 63.1626 -103.2510     23.4363 114.8646 -0.4962  0 -0.2367 0.5497  07:15:00
: 6 5087 2024-06-21 07:46:34 62.0992 -102.7717     23.4363 114.8646 -0.4992  0 -0.2562 0.5611  07:20:00

#+begin_src R :results output :session curso :exports both
 tapply(df$p1, df$tiempo$yday, mean)
#+end_src

#+RESULTS:
:       172       215       233       249       264       279       294       313       355 
: 0.1094235 0.1216368 0.1333419 0.1402298 0.1454683 0.1882011 0.1896050 0.1910719 0.1923433

#+begin_src R :results output :session curso :exports both
 sapply( split(df$p1, df$tiempo$yday), mean) 
#+end_src

#+RESULTS:
:       172       215       233       249       264       279       294       313       355 
: 0.1094235 0.1216368 0.1333419 0.1402298 0.1454683 0.1882011 0.1896050 0.1910719 0.1923433


* Generación de numeros aleatorios

Funciones de distribución de probabilidad en R

- =rnorm=, genera aleatorios con una distribución normal, con una media y una desviación estándar 
- =dnorm=, evalua la densidad de probabilidad Normal (con una media/SD) en un punto (o vector)
- =pnorm=, evalua la distribución acumulada de una distribución normal
- =rpois=, genera numeros aleatorios con una distribución Poisson


Trabajando con una distribución Normal

- =d= para densidad
- =r= para generación de numeros aleatorios
- =p= para distribución acumulada
- =q= para cuartiles


- dnorm(x, mean = 0, sd = 1, log =FALSE)
- pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
- qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE)
- rnorm(n, mean = 0, sd = 1, log =FALSE)

Sí $\Phi$ es la función de distribución acumulada para una distribución Normal, entonces $pnorm(q)=\Phi(q)$ y $qnorm(p)=\Phi^{-1}(p)$

#+begin_src R :results output :session curso :exports both
  rnorm(25)
#+end_src

#+RESULTS:
:  [1] -0.8339162  2.7282135  1.5032002  0.2159083  0.9567205 -0.8352028  1.1098704 -0.2286399  0.1156355  0.3312220
: [11] -0.9761586  0.8907942  2.5820284  2.5065900  1.8125590  0.1089328 -0.5557713  0.2969196  0.3253789  0.4799767
: [21]  0.6325707  0.1663338  1.1624244 -1.1407558 -0.3130671

* runif

#+begin_src R :results output :session curso :exports both
  data <- runif(1000)
  plot(data)
#+end_src

#+RESULTS:

#+begin_src R :results output :session curso :exports both
  data <- runif(100000)
  hist(data)
#+end_src

#+RESULTS:

#+begin_src R :results output :session curso :exports both
  data <- runif(100000)
  ddata <- density(data)
  plot(ddata)
#+end_src

#+RESULTS:



* rnorm 

#+begin_src R :results output :session curso :exports both
  data <- rnorm(10000)
  plot(data)
#+end_src

#+RESULTS:


#+begin_src R :results output :session curso :exports both
  data <- rnorm(100000)
  hist(data)
#+end_src

#+begin_src R :results output :session curso :exports both
  data <- rnorm(100000)
  ddata <- density(data)
  plot(ddata)
#+end_src

#+RESULTS:

#+begin_src R :results output :session curso :exports both
  data <- rnorm(10000)
  cdf <- ecdf(data)
  plot(cdf)
#+end_src

#+RESULTS:


* Ploting

Las gráficas en R son encapsuladas en la base y en algunos paquetes recomendados

- graphics
- lattice
- ggplot
- grid
- grDevice


La función =par= es usada para especificar parametros globales de la gráfica que afectan todos los plots en la sesión de R.

- =pch=: el simbolo de las gráficas (un circulo abierto por default)
- =lty=: el tipo de linea
- =lwd=: el ancho de linea
- =col=: color de línea
- =las=: la orientación de los ejes


** R
#+begin_src R :results output :session curso :exports both
  file = "./data/hw1_data.csv"
  df <- read.table(file, sep=',', header=TRUE)
  head(df)
#+end_src

#+RESULTS:
:   Ozone Solar.R Wind Temp Month Day
: 1    41     190  7.4   67     5   1
: 2    36     118  8.0   72     5   2
: 3    12     149 12.6   74     5   3
: 4    18     313 11.5   62     5   4
: 5    NA      NA 14.3   56     5   5
: 6    28      NA 14.9   66     5   6

#+begin_src R :results output :session curso :exports both
  dfw <- df[df$Month ==5,]
  plot(dfw$Day, dfw$Temp, type='p')
#+end_src

#+RESULTS:



#+begin_src R :results output :session curso :exports both
  dfw <- df[df$Month ==5,]
  png("./fig/plot01.png") ### pdf, bmp
  plot(dfw$Day, dfw$Temp, type='l')
  dev.off()
#+end_src

#+RESULTS:
: png 
:   2



#+begin_src R :file ./fig/plot.png :results file graphics :session curso :exports both
  par(mfrow=c(4,1))
  dfw <- df[df$Month ==5,]
  plot(dfw$Day, dfw$Temp, type='l')
  plot(dfw$Day, dfw$Temp, type='p', pch=2)
  plot(dfw$Day, dfw$Temp, type='l', lty=2)
  plot(dfw$Day, dfw$Temp, type='l', col= 2)
  par(mfrow=c(1,1))
#+end_src

#+RESULTS:
[[file:./fig/plot.png]]

* Lattice

#+begin_src R :results output :session curso :exports both
  library(lattice)
  data(environmental)
  df <- environmental
  head(df)
#+end_src

#+RESULTS:
:   ozone radiation temperature wind
: 1    41       190          67  7.4
: 2    36       118          72  8.0
: 3    12       149          74 12.6
: 4    18       313          62 11.5
: 5    23       299          65  8.6
: 6    19        99          59 13.8

** xyplot

#+begin_src R :file ./fig/xyplot.png :results file graphics :session curso :exports both
xyplot(ozone ~ radiation, data=df, main="Ozone vs. Radiation")
#+end_src

#+RESULTS:
[[file:./fig/xyplot.png]]
#+begin_src R :file ./fig/xyplot2.png :results file graphics :session curso :exports both
  temp.cut <- equal.count(df$temperature, 4)
  xyplot(ozone ~ radiation | temp.cut, data=df)
#+end_src

#+RESULTS:
[[file:./fig/xyplot2.png]]
#+begin_src R :file ./fig/xyplot3.png :results file graphics :session curso :exports both
  xyplot(ozone ~ radiation | temp.cut, data=df, layout=c(1,4))
#+end_src

#+RESULTS:
[[file:./fig/xyplot3.png]]
** Panel

#+begin_src R :file ./fig/xyplotPanel.png :results file graphics :session curso :exports both
    xyplot(ozone ~ radiation | temp.cut, data=df,
	   panel = function(x,y, ...){
	     panel.xyplot(x,y,...)
	     fit <- lm(y~x)
	     panel.abline(fit)
	   }, xlab = "Solar Radiation", ylab="Ozone(ppb)",
	   main = "Ozone Vs. Solar Radiation")
#+end_src

#+RESULTS:
[[file:./fig/xyplotPanel.png]]
** splom

#+begin_src R :file ./fig/splom.png :results file graphics :session curso :exports both
splom(~df)
#+end_src

#+RESULTS:
[[file:./fig/splom.png]]
** histogram

#+begin_src R :file ./fig/histogram.png :results file graphics :session curso :exports both
  histogram(~temperature, data=df)
#+end_src

#+RESULTS:
[[file:./fig/histogram.png]]
#+begin_src R :file ./fig/histogram2.png :results file graphics :session curso :exports both
  wind.cut <- equal.count(df$wind,4)
  
  histogram(~ozone | wind.cut, data=df)
#+end_src

#+RESULTS:
[[file:./fig/histogram2.png]]

* ggplot2

#+begin_src R :results output :session curso :exports both
  library(ggplot2)
  df <- data.frame(mpg)
  head(df)
#+end_src

#+RESULTS:
:   manufacturer model displ year cyl      trans drv cty hwy fl   class
: 1         audi    a4   1.8 1999   4   auto(l5)   f  18  29  p compact
: 2         audi    a4   1.8 1999   4 manual(m5)   f  21  29  p compact
: 3         audi    a4   2.0 2008   4 manual(m6)   f  20  31  p compact
: 4         audi    a4   2.0 2008   4   auto(av)   f  21  30  p compact
: 5         audi    a4   2.8 1999   6   auto(l5)   f  16  26  p compact
: 6         audi    a4   2.8 1999   6 manual(m5)   f  18  26  p compact

** qplot

#+begin_src R :file ./fig/qplot.png :results file graphics :session curso :exports both
qplot(displ, hwy, data=mpg)
#+end_src

#+RESULTS:
[[file:./fig/qplot.png]]

#+begin_src R :file ./fig/qplot2.png :results file graphics :session curso :exports both
qplot(displ, hwy, data=mpg, color=drv)
#+end_src

#+RESULTS:
[[file:./fig/qplot2.png]]

#+begin_src R :file ./fig/qplot3.png :results file graphics :session curso :exports both
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"))
#+end_src

#+RESULTS:
[[file:./fig/qplot3.png]]

#+begin_src R :file ./fig/qplot4.png :results file graphics :session curso :exports both
qplot(hwy, data=mpg, fill=drv)
#+end_src

#+RESULTS:
[[file:./fig/qplot4.png]]
#+begin_src R :file ./fig/qplot5.png :results file graphics :session curso :exports both
qplot(displ, hwy, data=mpg, facets=.~drv)
#+end_src

#+RESULTS:
[[file:./fig/qplot5.png]]


#+begin_src R :file ./fig/qplot6.png :results file graphics :session curso :exports both
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
#+end_src

#+RESULTS:
[[file:./fig/qplot6.png]]

** ggplot

2 -8 Plotting with ggplot2

#+begin_src R :results output :session curso :exports both
  library(ggplot2)
  df <- data.frame(mpg)
  head(df)
#+end_src

#+RESULTS:
:   manufacturer model displ year cyl      trans drv cty hwy fl   class
: 1         audi    a4   1.8 1999   4   auto(l5)   f  18  29  p compact
: 2         audi    a4   1.8 1999   4 manual(m5)   f  21  29  p compact
: 3         audi    a4   2.0 2008   4 manual(m6)   f  20  31  p compact
: 4         audi    a4   2.0 2008   4   auto(av)   f  21  30  p compact
: 5         audi    a4   2.8 1999   6   auto(l5)   f  16  26  p compact
: 6         audi    a4   2.8 1999   6 manual(m5)   f  18  26  p compact


#+begin_src R :file ./fig/ggplot.png :results file graphics :session curso :exports both
  g <- ggplot(df, aes(x=displ, y=hwy))
  g + geom_point()
#+end_src

#+RESULTS:
[[file:./fig/ggplot.png]]


#+begin_src R :file ./fig/ggplot2.png :results file graphics :session curso :exports both
  g <- ggplot(df, aes(x=displ, y=hwy))
  g + geom_point() + geom_smooth()
#+end_src

#+RESULTS:
[[file:./fig/ggplot2.png]]

#+begin_src R :file ./fig/ggplot3.png :results file graphics :session curso :exports both
  g <- ggplot(df, aes(x=displ, y=hwy))
  g + geom_point() + geom_smooth(method="lm")
#+end_src

#+RESULTS:
[[file:./fig/ggplot3.png]]
#+begin_src R :file ./fig/ggplot4.png :results file graphics :session curso :exports both
  g <- ggplot(df, aes(x=displ, y=hwy))
  g + geom_point() + facet_grid(.~drv) + geom_smooth(method= "lm")
#+end_src

#+RESULTS:
[[file:./fig/ggplot4.png]]
** Modificaciones est'eticas

#+begin_src R :file ./fig/ggplot5.png :results file graphics :session curso :exports both
  g <- ggplot(df, aes(x=displ, y=hwy))
  g + geom_point(color="steelblue", size=4, alpha=1/2)
#+end_src

#+RESULTS:
[[file:./fig/ggplot5.png]]
#+begin_src R :file ./fig/ggplot6.png :results file graphics :session curso :exports both
  g <- ggplot(df, aes(x=displ, y=hwy))
  g + geom_point( aes(color= drv), size=4, alpha=1/2)
#+end_src

#+RESULTS:
[[file:./fig/ggplot6.png]]
** Labels


#+begin_src R :file ./fig/ggplot7.png :results file graphics :session curso :exports both
    g <- ggplot(df, aes(x=displ, y=hwy))
    g + geom_point( aes(color= drv), size=4, alpha=1/2) +
      labs(title="My Title") + labs(x="x label", y = "y label")
#+end_src

#+RESULTS:
[[file:./fig/ggplot7.png]]
** Notas sobre los limites

#+begin_src R :results none :session curso :exports both
  testdat <- data.frame(x=1:100, y=rnorm(100))
  testdat[50, 2] <- 100 ## outlier
#+end_src


#+begin_src R :file ./fig/ggplotLimits.png :results file graphics :session curso :exports both
  par( mfrow=c(1,2))
  plot(testdat$x, testdat$y, type='l')
  plot(testdat$x, testdat$y, type='l', ylim=c(-3,3))
  par(mfrow=c(1,1))
#+end_src

#+RESULTS:
[[file:./fig/ggplotLimits.png]]

#+begin_src R :file ./fig/ggplotLimits2.png :results file graphics :session curso :exports both
  g <- ggplot(testdat, aes(x=x, y=y))
  g + geom_line()
  #g + geom_line() + ylim(-3,3)
#+end_src

#+RESULTS:
[[file:./fig/ggplotLimits2.png]]
#+begin_src R :file ./fig/ggplotLimits3.png :results file graphics :session curso :exports both
  g <- ggplot(testdat, aes(x=x, y=y))
  g + geom_line() + ylim(-3,3)
#+end_src

#+RESULTS:
[[file:./fig/ggplotLimits3.png]]
#+begin_src R :file ./fig/ggplotLimits4.png :results file graphics :session curso :exports both
  g <- ggplot(testdat, aes(x=x, y=y))
  g + geom_line() + coord_cartesian(ylim=c(-3,3))
#+end_src

#+RESULTS:
[[file:./fig/ggplotLimits4.png]]
