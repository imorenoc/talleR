#+title: Taller de R. Clase 05
#+author: Dr. Isaías Moreno Cruz
#+email: ismoc@cio.mx
#+date: 07-10-2024
#+latex_header: \mode<beamer>{\usetheme{Madrid}}

* Loop Function

Existen algunas funciones que implementan bucles para facilitar la programación

- =lapply=, loop sobre una lista y evalua una función en cada elemento 
- =sapply=, lo mismo que =lapply= pero trata de simplificar el resultado 
- =apply=, aplica una función sobre los margenes de un arreglo
- =tapply=, aplica una función sobre los subconjuntos de un vector
- =mapply=, versión multivariable de lapply

 Una función auxiliar es =split= también útil, en particular con =lapply=.

* lapply

=lapply= siempre regresa una lista.

** R
#+begin_src R :results output :session curso :exports both
  x <- list(a=1:5, b=rnorm(10))
  lapply(x, mean)
#+end_src

#+RESULTS:
: $a
: [1] 3
: 
: $b
: [1] -0.2094381


* lapply II

=lapply=, y las demás, usa funciones anónimas

** R
#+begin_src R :results output :session curso :exports both
  x <- list(a = matrix(1:4,2,2), b = matrix(1:6,3,2))
  x
#+end_src

#+RESULTS:
#+begin_example
$a
     [,1] [,2]
[1,]    1    3
[2,]    2    4

$b
     [,1] [,2]
[1,]    1    4
[2,]    2    5
[3,]    3    6
#+end_example


** R
Y se desea extraer la primera columna de ambas matrices.

#+begin_src R :results output :session curso :exports both
  lapply(x, function(elt) elt[,1])
#+end_src

#+RESULTS:
: $a
: [1] 1 2
: 
: $b
: [1] 1 2 3

* sapply

=sapply= trata de simplificar el resultado de =lapply=.

** R 
#+begin_src R :results output :session curso :exports both
  x <- list(a=1:4, b=rnorm(10), c=rnorm(20,1), d=rnorm(100,5))
  lapply(x, mean)
#+end_src

#+RESULTS:
#+begin_example
$a
[1] 2.5

$b
[1] -0.1226583

$c
[1] 1.02448

$d
[1] 4.94286
#+end_example

** R
#+begin_src R :results output :session curso :exports both
sapply(x, mean)
#+end_src

#+RESULTS:
:          a          b          c          d 
:  2.5000000 -0.1226583  1.0244796  4.9428599

* apply

=apply= es usado para evaluar una función (frecuentemente una anónima) sobre el margen de un arreglo.

** R
#+begin_src R :results output :session curso :exports both
  x <- matrix(rnorm(20), 5,4)
  x
#+end_src

#+RESULTS:
:            [,1]       [,2]       [,3]        [,4]
: [1,]  0.7552447 -2.0409268 -1.1802988 -0.14962021
: [2,] -0.3612420  0.4025746  0.8536489 -0.43940988
: [3,] -0.1206896  0.6039853 -1.0604170 -0.73377721
: [4,]  0.2825351 -0.5408644 -2.5579296 -0.21977122
: [5,]  0.2485246 -2.2835958 -0.6298257 -0.04059617

** R 
#+begin_src R :results output :session curso :exports both
  apply(x,2,mean)
#+end_src

#+RESULTS:
: [1]  0.1608746 -0.7717654 -0.9149644 -0.3166349

** R
#+begin_src R :results output :session curso :exports both
  apply(x,1,mean)
#+end_src

#+RESULTS:
: [1] -0.6539003  0.1138929 -0.3277246 -0.7590075 -0.6763733


* apply II

Para la suma y el promedio de las dimensiones de matrices, se tiene algunos atajos

- rowSums = apply(x,1,sum)
- rowMeans = apply(x,1,mean)
- colSums = apply(x,2,sum)
- colMeans = apply(x,2,mean)


Cuartiles en filas de matrices

** R
#+begin_src R :results output :session curso :exports both
  x<- matrix(rnorm(160), 8, 20)
  apply(x, 1, quantile, probs=c(0.25, 0.5, 0.75))
#+end_src

#+RESULTS:
:            [,1]       [,2]        [,3]        [,4]        [,5]       [,6]       [,7]       [,8]
: 25% -0.56445163 -0.6776988 -0.46433764 -0.76221683 -0.06502871 -0.2561606 -0.8169621 -0.4951658
: 50%  0.01410984 -0.1348199  0.01147909  0.09052132  0.19501059  0.1223415 -0.2008024  0.0628272
: 75%  0.49142764  0.7490381  0.84030834  0.86543623  0.56892792  0.8345716  0.4727538  0.8689835

* tapply


=tapply= es usado para aplicar a una función sobre subconjuntos de un vector.

** R
#+begin_src R :results output :session curso :exports both
str(tapply)
#+end_src

#+RESULTS:
: function (X, INDEX, FUN = NULL, ..., default = NA, simplify = TRUE)

- X es un vector
- INDEX es un factor o una lista de factores
- FUN es una función para ser aplicada
- ... contiene otros argumentos de la función FUN
- simplify, debe simplificar el resultado?

** R
#+begin_src R :results output :session curso :exports both
  x <- c(rnorm(10), runif(10), rnorm(10,1))
  f <- gl(3,10) ## Genera niveles de factores
  f
#+end_src

#+RESULTS:
:  [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3
: Levels: 1 2 3

* tapply II

** R
#+begin_src R :results output :session curso :exports both
 tapply(x, f, mean)
#+end_src

#+RESULTS:
:         1         2         3 
: 0.1594326 0.6164103 1.0177767

* split

=split= toma un vector o otros objetos y separarlo en grupos determinados por un factor o lista de factores.


#+begin_src R :results output :session curso :exports both
  x <- c(rnorm(10), runif(10), rnorm(10,1))
  f <- gl(3,10)
  split(x,f)
#+end_src

#+RESULTS:
: $`1`
:  [1]  0.8702612 -1.8441661 -0.5196864  0.2005001 -0.3028120 -1.8411893 -0.5149094 -0.9081394 -0.2087667 -0.2777377
: 
: $`2`
:  [1] 0.4507907 0.4535619 0.6916277 0.8304266 0.8121124 0.2443439 0.5401528 0.6138010 0.6801611 0.5228893
: 
: $`3`
:  [1] -0.002691316  0.304618892  1.245104727  0.914916657  1.399524298  2.314951530  0.797344283  0.850026751
:  [9] -0.089822084  2.627688931

#+begin_src R :results output :session curso :exports both
  lapply( split(x,f), mean)
#+end_src

#+RESULTS:
: $`1`
: [1] -0.5346646
: 
: $`2`
: [1] 0.5839868
: 
: $`3`
: [1] 1.036166

* mapply

=mapply= es una aplicación multivariable.

#+begin_src R :results output :session curso :exports both
str(mapply)
#+end_src

#+RESULTS:
: function (FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE)


